/*
    Test ROD for the ROD parser and Java Code Generator.
*/


<<Test Doc>>
enum EnumTest1{
    anEnumTestValue1,anEnumTestValue2, anEnumTestLastValue;
}

enum EnumTest2{
    ;
}



case class TypesOfValueTest{
    aByte: Byte;
    aShort: Short;
    anInt: Integer;
    aLong: Long;
    aFloat: Float;
    aDouble: Double;
    aString: String;
    anEnum: EnumTest1;
    aList: List<Integer>;
    aSet: Set<Integer>;
    aMap: Map<Integer,String>;
    aBoolean: Boolean;

}

case class WithDEfaultValues{
    aByte: Byte = 0;
    aShort: Short = 1;
    anInt: Integer = 2;
    aLong: Long = 3;
    aFloat: Float = 4.0;
    aDouble: Double = 5.0;
    aString: String = "TestString";
    anEnum: EnumTest1 = EnumTest1.anEnumTestValue1;
    aList: List<Integer> = [1,2,3];
    aSet: Set<Integer> = [2,3,4];
    aMap: Map<Integer,String>;
    aBoolean: Boolean = true;

}

@ExtendsJavaClass
case class Name{
    firstName:String;
    middleName:?String;
    lastName:String;
}

case class Email{
    address:String;
    name:?Name;
}

case class SimplePerson{
    id:Integer;
    name:Name;
    email:Email;

}

case class OptionalsTypesOfValueTest{
    aByte: ?Byte;
    aShort: ?Short;
    anInt: ?Integer;
    aLong: ?Long;
    aFloat: ?Float;
    aDouble: ?Double;
    aString: ?String;
    anEnum: ?EnumTest1;
    aList: ?List<Integer>;
    aSet: ?Set<Integer>;
    aMap: ?Map<Integer,Byte>;
    aBoolean: ?Boolean;

}

case class AnEmptyValueClass{

}

case class Tuple2<T1,T2>{
    _1:T1;
    _2:T2;
}

case class GenericsTest<A,B>{
    a:A;
    ab:Tuple2<A,B>;
    aEnum:Tuple2<A,EnumTest1>;
    a_intB: Tuple2<A,Tuple2<Integer,B>>;
    listA: List<A>;
    mapAB: Map<A,B>;
    optionalA: ?A;

}

case class ServiceVersion{
    major:Integer;
    minor:Integer;
    snapShot:Boolean;
}

interface IEntity{
    id:Integer;
}


case class ServiceInfo{
    serviceName:String;
    serviceVersion:ServiceVersion;
}


case class Invoice implements IEntity{
    id:Integer;
    invoiceNumber:String;
}

case class PersonEntity implements IEntity{
    id:Integer;
    name:Name;
}



remote class UserSession{
    user():SimplePerson;
    update(person:SimplePerson):void;
}

remote class AppTest{
    getInfo():ServiceInfo cached;
    getAllUsers():List<SimplePerson>;
    login(userName:String, passWord:String):?UserSession;
}
